const { validationResult } = require('express-validator');
const bcrypt = require('bcryptjs');
const db = require('../config/dbConnector');
const {
  checkIfEmailExists,
  insertUser,
  profileById,
} = require('../models/userModel');
const { jwtAuthMiddleware, generateToken } = require('../helpers/jwt');
const randomString = require('randomstring');
const sendMail = require('../helpers/sendMail');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const register = async (req, res) => {
  const { email, password } = req.body;

  //validate incoming request
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  //check if email already exists
  const present = await checkIfEmailExists(email);
  if (present) {
    return res.json({ message: 'Email already exists' });
  }
  //hash password
  const hashedPassword = await bcrypt.hash(password, 10);
  const data = {
    name: req.body.name,
    email: req.body.email,
    password: hashedPassword,
  };

  //insert new user in db
  const user = await insertUser(data);
  if (!user) {
    return res.status(500).json({ message: 'Error in registration' });
  } else {
    let mailSubject = 'Mail Verification';
    const randomToken = randomString.generate();
    let content = `
      <p>Hi ${req.body.name},</p>
      <p>Please <a href="https://localhost:3000/mail-verification?token=${randomToken}">verify your email</a>.</p>
    `;
    sendMail(req.body.email, mailSubject, content);
    db.query(
      'UPDATE user set token=? where email=?',
      [randomToken, req.body.email],
      function (error, result, field) {
        if (error) {
          return res.status(400).json({
            message: error,
          });
        }
      }
    );
    return res
      .status(200)
      .json({ message: 'Registration Successful', result: user });
  }
};

const login = async (req, res) => {
  const { email, password } = req.body;
  // console.log(password);
  //validate incoming request
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  //check if email exists in db
  const user = await checkIfEmailExists(email);

  if (!user) {
    return res.status(404).json({ message: 'Invalid username or password' });
  }

  //verify the password
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.status(400).json({ message: 'Invalid password' });
  }

  //generate token

  const token = generateToken({
    id: user.id,
    email: user.email,
  });
  // console.log('Token is :', token);
  return res.status(400).json({
    message: 'Login Successful',
    result: user,
    token: token,
  });
};

const getProfile = async (req, res) => {
  // const userData = req.user;
  // console.log(userData);
  console.log('Inside Profile');
  console.log(req.userData);
  const userId = req.userData.id;
  const userProfile = await profileById(userId);
  if (userProfile) {
    return res
      .status(200)
      .json({ message: 'Profile Found', result: userProfile });
  }
};

module.exports = { register, login, getProfile };
